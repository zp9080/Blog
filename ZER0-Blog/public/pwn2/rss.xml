<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PWN2s on ZER0-Blog</title><link>/pwn2/</link><description>Recent content in PWN2s on ZER0-Blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 28 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="/pwn2/rss.xml" rel="self" type="application/rss+xml"/><item><title>C++</title><link>/pwn2/new/c++/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/c++/</guid><description>std::allocator std::allocator::allocator 是 C++ 标准库中的一个类构造函数。它属于 std::allocator 类的一部分，用于分配和管理内存，特别是用于分配字符 (char) 类型的内存。 在使用 std::allocator 时，通常不需要显式调用 std::allocator::allocator 构</description></item><item><title>C++libc配置</title><link>/pwn2/c++-pwn/c++libc%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/c++-pwn/c++libc%E9%85%8D%E7%BD%AE/</guid><description>参考的是这篇文章 方法一 直接在相应的ubuntu版本下写题 方法二 在相应的ubuntu中创建C++文件,并且g++ -g test.cpp -o test,然后直接去指向</description></item><item><title>CISCN-2021 satool</title><link>/pwn2/llvm-pwn/ciscn-2021-satool/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/llvm-pwn/ciscn-2021-satool/</guid><description>刚做完红帽杯那个入门题来写这个，一看代码500多行的re直接不想看了，后来跟着这个博客过了一遍，收获不少 参考博客 核心思想 做llvm pass首</description></item><item><title>classic-httpd</title><link>/pwn2/webpwn/classic-httpd/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/webpwn/classic-httpd/</guid><description>[TOC] 参考博客 VNCTF2022一道题 一般httpd程序的执行流程为 在main函数中用pthread或fork来进入HTTP请求处理函数 在HTT</description></item><item><title>crt pwn</title><link>/pwn2/new/crt-pwn/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/crt-pwn/</guid><description>打NKCTF2024遇到的一个题，还比较有意思，pwn中结合了密码相关的知识 后面的内容很简单，就是写入p64()*4，因此刚好可以getsh</description></item><item><title>crypto</title><link>/pwn2/crypto/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/crypto/</guid><description>[TOC] BASE64 这篇文章已经非常详细 当在CTF中遇到BASE64，可以直接用工具进行加解密就行了，不用细究原理 RSA 示例 from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_OAEP def generate_key_pair(key_size=2048): &amp;#34;&amp;#34;&amp;#34; 生成 RSA 密钥对 :param</description></item><item><title>D3CTF PwnShell</title><link>/pwn2/php-pwn/d3ctf-pwnshell/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/php-pwn/d3ctf-pwnshell/</guid><description>[TOC] 参考博客1 题目分析 题目中add是一个堆块ck2存另一个堆块的地址ck1，这就有了利用的机会，如果可以控制ck2的内容，那么就有任意地址写 e</description></item><item><title>docker</title><link>/pwn2/tools/docker/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/docker/</guid><description>docker的安装与使用 docker常用命令 docker在pwn中的使用 在docker中搭建pwn环境 vscode连接docker容器 doc</description></item><item><title>gdbserver</title><link>/pwn2/tools/gdbserver/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/gdbserver/</guid><description>GDB Server的远程调试功能 利用gdbserver apt-get install openssh-server apt-get install gdb apt-get install gdbserver apt install net-tools apt install iptables 在docker中gdbserver docker_ip:6666 file_addr args 然后在虚拟机中gdb</description></item><item><title>go</title><link>/pwn2/new/go/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/go/</guid><description>题目描述 题目的重点就是要会用go语言写一个脚本执行system函数拿到shell，题目禁用了直接调用exec函数和orw，那么可以考虑用sy</description></item><item><title>httpd</title><link>/pwn2/webpwn/httpd/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/webpwn/httpd/</guid><description>[TOC] 此题是NKCTF2024 httpd这道题，其实这道题不用太懂http相关知识也能写 题目分析 %[^ ] 是C语言中 scanf 和 sscanf 函数用于格式化输入的格式化字</description></item><item><title>ida快捷键</title><link>/pwn2/tools/ida%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/ida%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>跳表修复 ida使用说明 ctrl+s快速看每一部分 shift+f12显示字符串 /在代码中写注释，;在汇编中写注释 g跳转到任意地址 x看交叉引用 s</description></item><item><title>json</title><link>/pwn2/json/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/json/</guid><description>JSON 常见格式 1.简单对象 { &amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;, &amp;#34;age&amp;#34;: 30, &amp;#34;is_student&amp;#34;: false } 这是一个包含三个键值对的简单对象。 2.嵌套对象 { &amp;#34;person&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;, &amp;#34;age&amp;#34;: 30, &amp;#34;address&amp;#34;: { &amp;#34;street&amp;#34;: &amp;#34;123 Main St&amp;#34;, &amp;#34;city&amp;#34;: &amp;#34;Anytown&amp;#34;, &amp;#34;country&amp;#34;: &amp;#34;USA&amp;#34; } } } 在这个示例中</description></item><item><title>kali</title><link>/pwn2/tools/kali/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/kali/</guid><description>账号:zzzp 密码：20040918 安装vmmare</description></item><item><title>linux基础</title><link>/pwn2/linux-basic-knowledge/linux%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/linux-basic-knowledge/linux%E5%9F%BA%E7%A1%80/</guid><description>linux基础 Linux基础 网络问题：换源 网站链接 man(man 指令) /tldr(与man基本类似，只不过显示的东西更加简洁) Linux 系统目录结构 | 菜鸟教程 (runoob.com)</description></item><item><title>llvm-pwn</title><link>/pwn2/llvm-pwn/pwn/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/llvm-pwn/pwn/</guid><description>[TOC] 主要参考了此篇 博客 核心思路 其实llvm pass最主要的是pwn opt这个文件，同时其一般都是no pie,Partial RELRO,因此通常可以通过覆写got表</description></item><item><title>llvm基础学习</title><link>/pwn2/llvm-pwn/llvm%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/llvm-pwn/llvm%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</guid><description>参考博客1 参考博客2 基础知识 前端后端都不用管，关注llvm IR这个东西 llvm IR的头部是一些Target Information target layout clang 与 llvm 常见指令 .ll 格式：人类可以阅读</description></item><item><title>protobuf</title><link>/pwn2/go-pwn/protobuf/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/go-pwn/protobuf/</guid><description>在go pwn的堆题中，经常会有结构体，在go中这些结构体就是通过protobuf来传递的 如果抹除了protobuf的标志，那就只能手撕了，具</description></item><item><title>pwndbg</title><link>/pwn2/tools/pwndbg/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/pwndbg/</guid><description>[TOC] 基本指令 help //帮助 i //info，查看一些信息，只输入info可以看可以接什么参数，下面几个比较常用 i b //常用，info break 查看所有断点信</description></item><item><title>scanf的格式化字符串</title><link>/pwn2/new/scanf%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/scanf%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>做了这么久的格式化字符串，第一次见scanf的格式化字符串，于是做个记录 题目分析 可以看到把read读入的作为scanf的第一个参数，同时要注</description></item><item><title>setuid</title><link>/pwn2/new/setuid/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/setuid/</guid><description>最近做了一个题执行了system(&amp;quot;/bin/sh&amp;quot;)后发现flag只有root才有read权限，这里要提权 可以参考此篇</description></item><item><title>socket</title><link>/pwn2/webpwn/socket/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/webpwn/socket/</guid><description>[TOC] 这篇文章生动详细地讲清楚了socket到底是什么 相关知识 一些关键理解 注意这里和反弹shell不太一样，反弹shell创建了套间字后直接co</description></item><item><title>tilix</title><link>/pwn2/tools/tilix/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/tilix/</guid><description>参考博客</description></item><item><title>tmux</title><link>/pwn2/tools/tmux/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/tmux/</guid><description>[TOC] 参考博客 参考博客 基本概念 session：一个服务器可以包含多个会话，可以理解成是一个特定的终端组合，通常将同一任务下的工作放到一个会话中。</description></item><item><title>tools installation</title><link>/pwn2/tools/tools-installation/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/tools-installation/</guid><description>[TOC] pwntools 直接pip install pwntools ROPgadget 参考此篇博客 one_gadget sudo apt update sudo apt install ruby gem install one_gadget ida 吾爱破解 gdb pwndbg 参考此篇博客 sudo ./setup.sh</description></item><item><title>vtable</title><link>/pwn2/c++-pwn/vtable/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/c++-pwn/vtable/</guid><description>例题 SICTF ROUND3 ezcpp 题目分析 题目上来泄露出了pie，也有后门函数，然后是两个功能get和print，核心思路是劫持vtable 细节阐述 对ida反汇编的</description></item><item><title>zellij</title><link>/pwn2/tools/zellij/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/tools/zellij/</guid><description>参考此篇博客</description></item><item><title>调试相关</title><link>/pwn2/winpwn/%E8%B0%83%E8%AF%95%E7%9B%B8%E5%85%B3/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/winpwn/%E8%B0%83%E8%AF%95%E7%9B%B8%E5%85%B3/</guid><description>在Windbg中，要查看当前指令所在的函数，您可以使用 ln（List Nearest Symbols）命令。该命令将告诉您当前执行指令所在的函数，以及在该函</description></item><item><title>浮点数</title><link>/pwn2/new/%E6%B5%AE%E7%82%B9%E6%95%B0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/%E6%B5%AE%E7%82%B9%E6%95%B0/</guid><description>用float-toy可以很方便的构造浮点数</description></item><item><title>红帽杯-2021 simpleVM</title><link>/pwn2/llvm-pwn/%E7%BA%A2%E5%B8%BD%E6%9D%AF-2021-simplevm/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/llvm-pwn/%E7%BA%A2%E5%B8%BD%E6%9D%AF-2021-simplevm/</guid><description>[TOC] 入门llvm pass的第一题， 这里给出一个写的比较详细的博客 题目分析 先ctrl+g定位到.load段找到pass函数 发现如果函数名为o0o</description></item><item><title>基本知识</title><link>/pwn2/php-pwn/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/php-pwn/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid><description>[TOC] 基础知识 php pwn开启远程得到的实际上是远程用apache搭建的一个web页面，和web息息相关 我们上传文件后可以直接访问url/exp.p</description></item><item><title>基础知识</title><link>/pwn2/arm-pwn/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/arm-pwn/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>all in one arm ret2csu 参考博客 调试 context(os=&amp;#39;linux&amp;#39;, arch=&amp;#39;aarch64&amp;#39;, log_level=&amp;#39;debug&amp;#39;) binary_path = &amp;#34;/home/zp9080/PWN/pwn&amp;#34; qemu_bin = &amp;#39;qemu-aarch64&amp;#39; # Ensure this is installed p = process([qemu_bin, &amp;#39;-L&amp;#39;,&amp;#39;/usr/aarch64-linux-gnu/&amp;#39;,&amp;#39;-g&amp;#39;, &amp;#39;1234&amp;#39;, binary_path]) p = process([qemu_bin, &amp;#39;-L&amp;#39;,&amp;#39;/usr/aarch64-linux-gnu/&amp;#39;, binary_path]) &amp;#39;&amp;#39;&amp;#39; gdb-multiarch pwn -q set architecture aarch64 target remote localhost:1234 b main c b *0x400854 gdb-multiarch -c /home/zp9080/PWN/qemu_silent_20240714-144857_155086.core &amp;#39;&amp;#39;&amp;#39;</description></item><item><title>基础知识</title><link>/pwn2/go-pwn/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/go-pwn/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>参考博客1 string,slice,多个返回值 内置数据类型 len与cap stringtoslicebyte memmove</description></item><item><title>基础知识</title><link>/pwn2/mips-pwn/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/mips-pwn/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>经典例题讲解 wiki内容 运行mips文件以及调试 安装mipsrop插件 shellcode base mips没有NX功能，所以栈是可以执行的，所以基本上都是打shel</description></item><item><title>利用函数返回值设置rax</title><link>/pwn2/new/%E5%88%A9%E7%94%A8%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E8%AE%BE%E7%BD%AErax/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/%E5%88%A9%E7%94%A8%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E8%AE%BE%E7%BD%AErax/</guid><description>利用函数返回值设置rax参数其实是一种挺常见的技巧，read函数可以设置rax，strtol也可以设置rax 这里写的题目是vnctf2023</description></item><item><title>例题</title><link>/pwn2/arm-pwn/%E4%BE%8B%E9%A2%98/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/arm-pwn/%E4%BE%8B%E9%A2%98/</guid><description>以xyctf2024 EZ2.0?为例题，主要记录一下做题过程 发现pwntools的gdb.debug功能非常强大，可以很方便的调试 第一步看静</description></item><item><title>例题</title><link>/pwn2/mips-pwn/%E4%BE%8B%E9%A2%98/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/mips-pwn/%E4%BE%8B%E9%A2%98/</guid><description>这里以XYCTF2024 EZ1.0? 为例题 题目分析 int vuln() { char v1[64]; // [sp+18h] [+18h] BYREF read(0, v1, 256); return 0; } 无法泄露栈地址，因此要找适当的gadget来把sp的值给某个寄存器，然</description></item><item><title>例题</title><link>/pwn2/php-pwn/%E4%BE%8B%E9%A2%98/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/php-pwn/%E4%BE%8B%E9%A2%98/</guid><description>2020De1CTF-mixture 参考博客 这个题的.so扩展函数的功能就是打开文件并且输出，memcpy没有限制n的大小有个很明显的栈溢出 主要思路是通过/proc/self</description></item><item><title>例题</title><link>/pwn2/vmpwn/%E4%BE%8B%E9%A2%98/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/vmpwn/%E4%BE%8B%E9%A2%98/</guid><description>OGEEK2019_FINAL_OVM 数组溢出 from pwn import * context.log_level=&amp;#39;debug&amp;#39; p = process(&amp;#34;vmpwn&amp;#34;) elf = ELF(&amp;#34;vmpwn&amp;#34;) libc = elf.libc s = lambda data :p.send(data) sa = lambda text,data :p.sendafter(text, str(data)) sl = lambda data :p.sendline(data) sla = lambda text,data :p.sendlineafter(text, str(data)) r = lambda num=4096 :p.recv(num) ru = lambda text :p.recvuntil(text) uu32 = lambda :u32(p.recvuntil(&amp;#34;\xf7&amp;#34;)[-4:].ljust(4,&amp;#34;\x00&amp;#34;)) uu64 = lambda :u64(p.recvuntil(&amp;#34;\x7f&amp;#34;)[-6:].ljust(8,&amp;#34;\x00&amp;#34;)) lg = lambda name,data :p.success(name + &amp;#34;-&amp;gt; 0x%x&amp;#34; % data) def</description></item><item><title>例题</title><link>/pwn2/winpwn/%E4%BE%8B%E9%A2%98/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/winpwn/%E4%BE%8B%E9%A2%98/</guid><description>最近打NKCTF遇到了一个winpwn，在此也是借着这个机会学习了一下 漏洞也很明显，如果是linux直接ret2libc很快就打完了，这里引</description></item><item><title>盲注</title><link>/pwn2/new/%E7%9B%B2%E6%B3%A8/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/%E7%9B%B2%E6%B3%A8/</guid><description>对于盲注，最关键的地方就是根据已有经验去猜 例题 SICTF ROUND3 ezsignin 题目描述，ubuntu:22.04 libc2.35 这个题通过尝试应该是个无限read+printf 解题</description></item><item><title>强网杯-2022 yakagame</title><link>/pwn2/llvm-pwn/%E5%BC%BA%E7%BD%91%E6%9D%AF-2022-yakagame/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/llvm-pwn/%E5%BC%BA%E7%BD%91%E6%9D%AF-2022-yakagame/</guid><description>题目分析 做过前两个llvm的题，逆向基本已经没有什么问题了，题目逻辑都看得懂，题目中有个很明显的后门函数 if ( (__int64)*score &amp;gt; 0x12345678 ) backdoor(); 但是有个很困惑的地方是</description></item><item><title>异常处理</title><link>/pwn2/c++-pwn/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/c++-pwn/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>[TOC] 原理 C++异常处理的机制可以在网上进行查找学习，这里主要记录pwn中如何使用这一机制 主要过程 1）调用 __cxa_allocate_exception 函数，分配一个异常对象。 2）调用 __cxa_throw 函</description></item><item><title>游戏逆向pwn</title><link>/pwn2/new/%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91pwn/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91pwn/</guid><description>一个逆向游戏题,这里有个很明显的任意写漏洞 if ( op == &amp;#39;l&amp;#39; ) player_tile = getchar(); *(_BYTE *)(row[1] + buf + 90 * *row) = player_tile; 但这里有个很恶心的地方*(_BYTE *)(row[1] + buf + 90 * *row) = 0x2E; 这个地</description></item><item><title>有关system函数</title><link>/pwn2/new/%E6%9C%89%E5%85%B3system%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/new/%E6%9C%89%E5%85%B3system%E5%87%BD%E6%95%B0/</guid><description>[TOC] 最近写了vnctf2023的traveler一题，一眼看出是栈迁移，题目也给了system函数，但是卡了很久 但是要注意一个很坑的地方，就是</description></item><item><title>远程交互</title><link>/pwn2/linux-basic-knowledge/%E8%BF%9C%E7%A8%8B%E4%BA%A4%E4%BA%92/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/linux-basic-knowledge/%E8%BF%9C%E7%A8%8B%E4%BA%A4%E4%BA%92/</guid><description>[TOC] 登录远程服务器 ssh -p 50022 my@127.0.0.1 -p 后面是端口 my 是服务器用户名 127.0.0.1 是服务器 ip 与远程交互文件 可以参考这篇文章 Linux scp 命令用于 Linux 之间复制文件和目录。 scp 是 secure copy 的缩</description></item><item><title>杂乱的知识点</title><link>/pwn2/linux-basic-knowledge/%E6%9D%82%E4%B9%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/linux-basic-knowledge/%E6%9D%82%E4%B9%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</guid><description>[TOC] gdb关闭本地alsr 参考此篇博客 echo 0 | sudo tee /proc/sys/kernel/randomize_va_space 上面那个直接关闭本地整个的alsr set disable-randomization on show disable-randomization sudo -s echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space exit 文件路径 “/”在系统文件中表示绝对</description></item><item><title>栈溢出</title><link>/pwn2/c++-pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/c++-pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/</guid><description>例题 SICTF ROUND3 overflow 漏洞在这里，cin是不限制读入长度的，但是要注意不要用space,\n，那么operator=就相当于任意写，而buf又在栈上，把</description></item><item><title>知识学习</title><link>/pwn2/c++-pwn/%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/c++-pwn/%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</guid><description>C++知识点 * __int64 v1; // rax v1 = std::operator&amp;lt;&amp;lt;&amp;lt;std::char_traits&amp;lt;char&amp;gt;&amp;gt;(&amp;amp;std::cout, &amp;#34;What do you want to say?&amp;#34;); std命名空间，operator&amp;laquo;是重载运算符函数，&amp;laquo;&amp;lt;std::ch</description></item><item><title>知识学习</title><link>/pwn2/vmpwn/%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>/pwn2/vmpwn/%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</guid><description>参考博客1 参考博客2 有时候可以逆向出结构体 vmpwn难度在于逆向，逆向结束后一般都是会有整数溢出进行任意地址读写或者是个堆题，七分逆向三分猜</description></item></channel></rss>