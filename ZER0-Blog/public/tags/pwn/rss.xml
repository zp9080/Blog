<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwn on ZER0-Blog</title><link>https://zp9080.github.io/tags/pwn/</link><description>Recent content in Pwn on ZER0-Blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 28 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://zp9080.github.io/tags/pwn/rss.xml" rel="self" type="application/rss+xml"/><item><title>AE64</title><link>https://zp9080.github.io/shellcode/ae64/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/shellcode/ae64/</guid><description>AE64 AE64 is a tool which can transform any amd64 architecture shellcode into pure alphanumeric shellcode using self-modify code technology, so the page need to be writable.
Install git clone https://github.com/veritas501/ae64.git --depth 1 cd ae64 sudo python3 setup.py install Usage For usage example, you can see example folder.
Quickstart from ae64 import AE64 from pwn import * context.arch=&amp;#39;amd64&amp;#39; # get bytes format shellcode shellcode = asm(shellcraft.sh()) # get alphanumeric shellcode enc_shellcode = AE64().</description></item><item><title>C++</title><link>https://zp9080.github.io/pwn-new/c++/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/c++/</guid><description>std::allocator std::allocator::allocator 是 C++ 标准库中的一个类构造函数。它属于 std::allocator 类的一部分，用于分配和管理内存，特别是用于分配字符 (char) 类型的内存。 在使用 std::allocator 时，通常不需要显式调用 std::allocator::allocator 构</description></item><item><title>crt pwn</title><link>https://zp9080.github.io/pwn-new/crt-pwn/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/crt-pwn/</guid><description>打NKCTF2024遇到的一个题，还比较有意思，pwn中结合了密码相关的知识 后面的内容很简单，就是写入p64()*4，因此刚好可以getsh</description></item><item><title>dbg小技巧</title><link>https://zp9080.github.io/pwn/dbg%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn/dbg%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>fp tls disass search -p, &amp;ndash;pointer Search for a pointer-width integer ROPgadget &amp;ndash;binary libc-2.32.so | grep &amp;lsquo;mov rdx, qword ptr [rdi + 8]&amp;rsquo; ROPgadget &amp;ndash;binary libc-2.32.so | grep &amp;lsquo;rdx.*rdi&amp;rsquo; 搜索包含同时出现rdx和rdi寄存器的指令 .*是一个正则表达式，表示匹配任意字符零</description></item><item><title>go</title><link>https://zp9080.github.io/pwn-new/go/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/go/</guid><description>题目描述 题目的重点就是要会用go语言写一个脚本执行system函数拿到shell，题目禁用了直接调用exec函数和orw，那么可以考虑用sy</description></item><item><title>linux基础</title><link>https://zp9080.github.io/linux-basic-knowledge/linux%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/linux-basic-knowledge/linux%E5%9F%BA%E7%A1%80/</guid><description>linux基础 Linux基础 网络问题：换源 网站链接 man(man 指令) /tldr(与man基本类似，只不过显示的东西更加简洁) Linux 系统目录结构 | 菜鸟教程 (runoob.com)</description></item><item><title>printf函数</title><link>https://zp9080.github.io/pwn-others/printf%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-others/printf%E5%87%BD%E6%95%B0/</guid><description>奇怪的知识点，printf函数会有个判断al的值是否为0的操作来判断是否进行浮点数操作</description></item><item><title>scanf的格式化字符串</title><link>https://zp9080.github.io/pwn-new/scanf%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/scanf%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>做了这么久的格式化字符串，第一次见scanf的格式化字符串，于是做个记录 题目分析 可以看到把read读入的作为scanf的第一个参数，同时要注</description></item><item><title>setuid</title><link>https://zp9080.github.io/pwn-new/setuid/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/setuid/</guid><description>最近做了一个题执行了system(&amp;quot;/bin/sh&amp;quot;)后发现flag只有root才有read权限，这里要提权 可以参考此篇</description></item><item><title>system_execve函数</title><link>https://zp9080.github.io/pwn-others/system_execve%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-others/system_execve%E5%87%BD%E6%95%B0/</guid><description>[TOC] system函数 system(&amp;quot;$0&amp;quot;) system(&amp;ldquo;sh&amp;rdquo;) system(&amp;quot;/bin/sh&amp;quot;) system(&amp;quot;/bin//sh&amp;quot;)都可以拿到shell cat *：是一个在命令行中使用的Unix/L</description></item><item><title>浮点数</title><link>https://zp9080.github.io/pwn-new/%E6%B5%AE%E7%82%B9%E6%95%B0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/%E6%B5%AE%E7%82%B9%E6%95%B0/</guid><description>用float-toy可以很方便的构造浮点数</description></item><item><title>利用函数返回值设置rax</title><link>https://zp9080.github.io/pwn-new/%E5%88%A9%E7%94%A8%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E8%AE%BE%E7%BD%AErax/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/%E5%88%A9%E7%94%A8%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E8%AE%BE%E7%BD%AErax/</guid><description>利用函数返回值设置rax参数其实是一种挺常见的技巧，read函数可以设置rax，strtol也可以设置rax 这里写的题目是vnctf2023</description></item><item><title>盲注</title><link>https://zp9080.github.io/pwn-new/%E7%9B%B2%E6%B3%A8/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/%E7%9B%B2%E6%B3%A8/</guid><description>对于盲注，最关键的地方就是根据已有经验去猜 例题 SICTF ROUND3 ezsignin 题目描述，ubuntu:22.04 libc2.35 这个题通过尝试应该是个无限read+printf 解题</description></item><item><title>游戏逆向pwn</title><link>https://zp9080.github.io/pwn-new/%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91pwn/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91pwn/</guid><description>一个逆向游戏题,这里有个很明显的任意写漏洞 if ( op == &amp;#39;l&amp;#39; ) player_tile = getchar(); *(_BYTE *)(row[1] + buf + 90 * *row) = player_tile; 但这里有个很恶心的地方*(_BYTE *)(row[1] + buf + 90 * *row) = 0x2E; 这个地</description></item><item><title>有关system函数</title><link>https://zp9080.github.io/pwn-new/%E6%9C%89%E5%85%B3system%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-new/%E6%9C%89%E5%85%B3system%E5%87%BD%E6%95%B0/</guid><description>[TOC] 最近写了vnctf2023的traveler一题，一眼看出是栈迁移，题目也给了system函数，但是卡了很久 但是要注意一个很坑的地方，就是</description></item><item><title>远程交互</title><link>https://zp9080.github.io/linux-basic-knowledge/%E8%BF%9C%E7%A8%8B%E4%BA%A4%E4%BA%92/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/linux-basic-knowledge/%E8%BF%9C%E7%A8%8B%E4%BA%A4%E4%BA%92/</guid><description>[TOC] 登录远程服务器 ssh -p 50022 my@127.0.0.1 -p 后面是端口 my 是服务器用户名 127.0.0.1 是服务器 ip 与远程交互文件 可以参考这篇文章 Linux scp 命令用于 Linux 之间复制文件和目录。 scp 是 secure copy 的缩</description></item><item><title>杂乱的知识点</title><link>https://zp9080.github.io/linux-basic-knowledge/%E6%9D%82%E4%B9%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/linux-basic-knowledge/%E6%9D%82%E4%B9%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</guid><description>[TOC] gdb关闭本地alsr 参考此篇博客 echo 0 | sudo tee /proc/sys/kernel/randomize_va_space 上面那个直接关闭本地整个的alsr set disable-randomization on show disable-randomization sudo -s echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space exit 文件路径 “/”在系统文件中表示绝对</description></item><item><title>做题遇到的函数</title><link>https://zp9080.github.io/pwn-others/%E5%81%9A%E9%A2%98%E9%81%87%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/pwn-others/%E5%81%9A%E9%A2%98%E9%81%87%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0/</guid><description>[TOC] strtoull函数 munmap函数 setvbuf函数 fgets函数 char *fgets(char *str, int n, FILE *stream); fgets() 从 stream 中读取字符，直到读取了 n-1 个字符、读取并转移到字符串</description></item></channel></rss>